### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
SchoolData <- SchoolData %>%
distinct(.)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
duplicated(SchoolData)
duplicated(SchoolData[c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData <- SchoolData  %>% distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')
View(SchoolData)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
#duplicated(SchoolData[c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData <- SchoolData  %>% distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel', keep_all=TRUE)
View(SchoolData)
tmap_mode("view")
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
#duplicated(SchoolData[c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData  %>% distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
tmap_mode("view")
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
#duplicated(SchoolData[c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
#SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
#duplicated(SchoolData[c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
## Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remov
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
## remove duplicates
SchoolData <-  unique(SchoolData['school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData <-  unique(SchoolData[,'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <-  unique(SchoolData['school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <-  unique(SchoolData[c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData <-  unique(SchoolData[,c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData <-  unique(SchoolData[, c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData <-  unique(SchoolData[, 'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData <-  unique(SchoolData[., 'school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData <-  unique(SchoolData['school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel'])
SchoolData %>%
distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel', .keep_all = TRUE)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData %>%
distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel', .keep_all = TRUE)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
SchoolData <- SchoolData %>%
distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel', .keep_all = TRUE)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- as.data.frame(SchoolData)
SchoolData <- SchoolData %>%
distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel', .keep_all = TRUE)
View(SchoolData)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- SchoolData %>%
distinct('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel', .keep_all = TRUE)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- SchoolData %>%
unique('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')
tmap_mode("view")
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData[!duplicated(SchoolData[ , c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')]),]
SchoolData <- SchoolData[!duplicated(SchoolData[ , c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')]),]
### Hungary Shape
HungaryShape <- st_read(here::here("shapefiles", "gadm36_HUN_shp", "gadm36_HUN_2.shp"))
## Hungary's epsg: 23700
HungaryShapeMap <- HungaryShape %>%
st_transform(., 23700)
qtm(HungaryShapeMap)
tm_shape(HungaryShapeMap) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(SchoolData) +
tm_dots(col = "green")
### Let's join + add area calcualtion + school density number
HungarySchools <- HungaryShapeMap %>%
st_join(SchoolData) %>%
add_count('NAME_2') %>%
janitor::clean_names()%>%
#calculate area
mutate(area=st_area(.))%>%
#then density of the points per area
mutate(density=n/area)
### GROUPBY Density
HungarySchoolsDensity<- HungarySchools %>%
group_by(gid_2) %>%
summarise(density = first(density),
name_2= first(name_2),
schoolcount= first(n))
### GROUPBY
HungarySchoolsSubject<- HungarySchools %>%
group_by(gid_2) %>%
summarise(sub_avg = mean(eng_lang_midlevel_percent, na.rm = TRUE),
name_2= first(name_2),
schoolcount= first(n),
) %>%
add_count('grid_2')
tm_shape(HungarySchoolsSubject) +
tm_polygons("sub_avg",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("name_2", "sub_avg"),
title="Hungary Highscool Density")
################# Create the Language Score
### GROUPBY
#lang_cols <-  HungarySchools %>%
# select(., contains('_lang_')) %>%
#colnames(.)
HungarySchools <- HungarySchools %>%
mutate(., eng_lang_a_prodsum = ifelse(eng_lang_a_percent >= 45, (eng_lang_a_percent + 50) * eng_lang_a , eng_lang_a_percent  * eng_lang_a)) %>%
mutate(., eng_lang_midlevel_prodsum = eng_lang_midlevel * eng_lang_midlevel_percent) %>%
mutate(., eng_prodsum =  ifelse(is.na(eng_lang_a_prodsum), 0, eng_lang_a_prodsum) +  ifelse(is.na(eng_lang_midlevel_prodsum), 0, eng_lang_midlevel_prodsum)) %>%
mutate(., eng_stud_count =  ifelse(is.na(eng_lang_a), 0, eng_lang_a) +  ifelse(is.na(eng_lang_midlevel), 0, eng_lang_midlevel))
HungarySchools$eng_stud_count <- HungarySchools$eng_stud_count %>% replace(.==0, NA)
HungarySchools$eng_prodsum <- HungarySchools$eng_prodsum %>% replace(.==0, NA)
#Test <- HungarySchools %>%
#    select(., contains("eng_"))
HungarySchoolsLanguage<- HungarySchools %>%
group_by(gid_2) %>%
summarise(
density = first(density),
name_2= first(name_2),
eng_prodsum = sum(eng_prodsum , na.rm = TRUE),
eng_stud_count= sum(eng_stud_count, na.rm = TRUE),
) %>%
mutate(., eng_score = eng_prodsum / eng_stud_count)
#HungarySchoolsLanguage <- HungarySchoolsLanguage %>%
#st_as_sf(.)
tm_shape(HungarySchoolsLanguage) +
tm_polygons("eng_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("name_2", "eng_score"),
title="Eng. Score")
############# Do it with for loop
lang_cols = c('eng','hebrew','spanish','lovari','holland','slovakian','esperanto','croatian','greek','chinese','german','romanian','french','polish','portuguese','italian','japanese','serbian','russian','beas')
HungaryLanugageAll <- HungaryShapeMap
for (l in lang_cols) {
var_lang_a_prodsum =rlang::sym(paste(l,"_lang_a_prodsum",sep = ""))
var_lang_midlevel_prodsum =rlang::sym(paste(l,"_lang_midlevel_prodsum",sep = ""))
var_prodsum =rlang::sym(paste(l,"_prodsum",sep = ""))
var_stud_count =rlang::sym(paste(l,"_stud_count",sep = ""))
var_lang_a <- rlang::sym(paste(l,"_lang_a",sep = ""))
var_lang_a_percent <- rlang::sym(paste(l,"_lang_a_percent",sep = ""))
var_lang_midlevel <- rlang::sym(paste(l,"_lang_midlevel",sep = ""))
var_lang_midlevel_percent <- rlang::sym(paste(l,"_lang_midlevel_percent",sep = ""))
var_score <- rlang::sym(paste(l,"_score",sep = ""))
### Creating extra columns
HungarySchools <- HungarySchools %>%
mutate(., (!!var_lang_a_prodsum) := ifelse((!!var_lang_a_percent) >= 45, ((!!var_lang_a_percent) + 50) * (!!var_lang_a) , (!!var_lang_a_percent)  * (!!var_lang_a))) %>%
mutate(., (!!var_lang_midlevel_prodsum) := (!!var_lang_midlevel) * (!!var_lang_midlevel_percent)) %>%
mutate(., (!!var_prodsum ):=  ifelse(is.na((!!var_lang_a_prodsum)), 0, (!!var_lang_a_prodsum)) +  ifelse(is.na((!!var_lang_midlevel_prodsum)), 0, (!!var_lang_midlevel_prodsum))) %>%
mutate(., (!!var_stud_count) :=  ifelse(is.na((!!var_lang_a)), 0, (!!var_lang_a)) +  ifelse(is.na((!!var_lang_midlevel)), 0, (!!var_lang_midlevel)))
## Zeros are NA -
HungarySchools[[var_stud_count]] <- HungarySchools[[var_stud_count]] %>% replace(.==0, NA)
HungarySchools[[var_prodsum]] <- HungarySchools[[var_prodsum]] %>% replace(.==0, NA)
### Groupby
HungarySchoolsLanguage<- HungarySchools %>%
group_by(gid_2) %>%
summarise(
name_2= first(name_2),
!!var_prodsum := sum(!!var_prodsum , na.rm = TRUE),
!!var_stud_count := sum(!!var_stud_count, na.rm = TRUE),
) %>%
mutate(., !!var_score  := (!!var_prodsum)  / (!!var_stud_count))
### Merging them into a large Dataset with all languages - covert them to data.frame - later we convert them back
HungaryLanugageAll<- merge(HungaryLanugageAll %>% as.data.frame(),HungarySchoolsLanguage %>% as.data.frame(), by.x="GID_2", by.y="gid_2", no_dups=TRUE )
print(l)
}
## Prodsum cols
prodsum_cols <-  HungaryLanugageAll %>%
select(., contains('_prodsum')) %>%
colnames(.)
## Number of Student  columns
stud_cols <-  HungaryLanugageAll %>%
select(., contains('_stud_count')) %>%
colnames(.)
### Creating over all columns prodsum, all student, score
HungaryLanugageAll$all_prodsum <- rowSums(HungaryLanugageAll[prodsum_cols], na.rm = TRUE)
HungaryLanugageAll$all_stud <- rowSums(HungaryLanugageAll[stud_cols], na.rm = TRUE)
HungaryLanugageAll <- HungaryLanugageAll %>%
mutate(., all_score = all_prodsum / all_stud )
### Convert back to SF
HungaryLanugageAll <- st_as_sf(HungaryLanugageAll)
tm_shape(HungaryLanugageAll) +
tm_polygons("all_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("NAME_2", "all_score"),
title="Language Score")
sum(HungaryLanugageAll$all_prodsum)
sum(HungaryLanugageAll$all_stud)
HungaryLanugageAll <- HungaryLanugageAll %>%
mutate(., all_score = all_prodsum / all_stud )
### Convert back to SF
HungaryLanugageAll <- st_as_sf(HungaryLanugageAll)
tm_shape(HungaryLanugageAll) +
tm_polygons("all_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("NAME_2", "all_score"),
title="Language Score"
tm_shape(HungaryLanugageAll) +
tm_polygons("all_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("NAME_2", "all_score"),
title="Language Score")
### Convert back to SF
HungaryLanugageAll <- st_as_sf(HungaryLanugageAll)
tm_shape(HungaryLanugageAll) +
tm_polygons("all_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("NAME_2", "all_score"),
title="Language Score")
sum(HungaryLanugageAll$all_prodsum)
sum(HungaryLanugageAll$all_stud)
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
SchoolData <- SchoolData[!duplicated(SchoolData[ , c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')]),]
SchoolData <- SchoolData[!duplicated(SchoolData[ , c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')]),]
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
View(HungarySchoolsDensity)
## Interactive Viewing
tmap_mode("view")
SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'),
na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates
SchoolData <- SchoolData[!duplicated(SchoolData[ , c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')]),]
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
coords=c('longitude','latitude'),
crs=projcrs)
st_crs(SchoolData) <- projcrs
SchoolData <- SchoolData %>%
st_transform(.,23700)
HungaryShapeMap <- st_read(here::here("shapefiles", "gadm36_HUN_shp", "gadm36_HUN_2.shp"))
## Hungary's epsg: 23700
HungaryShapeMap <- HungaryShape %>%
st_transform(., 23700)
#lang_cols <-  HungarySchools %>%
# select(., contains('_lang_')) %>%
#colnames(.)
HungarySchools <- HungarySchools %>%
mutate(., eng_lang_a_prodsum = ifelse(eng_lang_a_percent >= 45, (eng_lang_a_percent + 50) * eng_lang_a , eng_lang_a_percent  * eng_lang_a)) %>%
mutate(., eng_lang_midlevel_prodsum = eng_lang_midlevel * eng_lang_midlevel_percent) %>%
mutate(., eng_prodsum =  ifelse(is.na(eng_lang_a_prodsum), 0, eng_lang_a_prodsum) +  ifelse(is.na(eng_lang_midlevel_prodsum), 0, eng_lang_midlevel_prodsum)) %>%
mutate(., eng_stud_count =  ifelse(is.na(eng_lang_a), 0, eng_lang_a) +  ifelse(is.na(eng_lang_midlevel), 0, eng_lang_midlevel))
HungarySchools$eng_stud_count <- HungarySchools$eng_stud_count %>% replace(.==0, NA)
HungarySchools$eng_prodsum <- HungarySchools$eng_prodsum %>% replace(.==0, NA)
#Test <- HungarySchools %>%
#    select(., contains("eng_"))
HungarySchoolsLanguage<- HungarySchools %>%
group_by(gid_2) %>%
summarise(
density = first(density),
name_2= first(name_2),
eng_prodsum = sum(eng_prodsum , na.rm = TRUE),
eng_stud_count= sum(eng_stud_count, na.rm = TRUE),
) %>%
mutate(., eng_score = eng_prodsum / eng_stud_count)
#HungarySchoolsLanguage <- HungarySchoolsLanguage %>%
#st_as_sf(.)
tm_shape(HungarySchoolsLanguage) +
tm_polygons("eng_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("name_2", "eng_score"),
title="Eng. Score")
############# Do it with for loop
lang_cols = c('eng','hebrew','spanish','lovari','holland','slovakian','esperanto','croatian','greek','chinese','german','romanian','french','polish','portuguese','italian','japanese','serbian','russian','beas')
HungaryLanugageAll <- HungaryShapeMap
for (l in lang_cols) {
var_lang_a_prodsum =rlang::sym(paste(l,"_lang_a_prodsum",sep = ""))
var_lang_midlevel_prodsum =rlang::sym(paste(l,"_lang_midlevel_prodsum",sep = ""))
var_prodsum =rlang::sym(paste(l,"_prodsum",sep = ""))
var_stud_count =rlang::sym(paste(l,"_stud_count",sep = ""))
var_lang_a <- rlang::sym(paste(l,"_lang_a",sep = ""))
var_lang_a_percent <- rlang::sym(paste(l,"_lang_a_percent",sep = ""))
var_lang_midlevel <- rlang::sym(paste(l,"_lang_midlevel",sep = ""))
var_lang_midlevel_percent <- rlang::sym(paste(l,"_lang_midlevel_percent",sep = ""))
var_score <- rlang::sym(paste(l,"_score",sep = ""))
### Creating extra columns
HungarySchools <- HungarySchools %>%
mutate(., (!!var_lang_a_prodsum) := ifelse((!!var_lang_a_percent) >= 45, ((!!var_lang_a_percent) + 50) * (!!var_lang_a) , (!!var_lang_a_percent)  * (!!var_lang_a))) %>%
mutate(., (!!var_lang_midlevel_prodsum) := (!!var_lang_midlevel) * (!!var_lang_midlevel_percent)) %>%
mutate(., (!!var_prodsum ):=  ifelse(is.na((!!var_lang_a_prodsum)), 0, (!!var_lang_a_prodsum)) +  ifelse(is.na((!!var_lang_midlevel_prodsum)), 0, (!!var_lang_midlevel_prodsum))) %>%
mutate(., (!!var_stud_count) :=  ifelse(is.na((!!var_lang_a)), 0, (!!var_lang_a)) +  ifelse(is.na((!!var_lang_midlevel)), 0, (!!var_lang_midlevel)))
## Zeros are NA -
HungarySchools[[var_stud_count]] <- HungarySchools[[var_stud_count]] %>% replace(.==0, NA)
HungarySchools[[var_prodsum]] <- HungarySchools[[var_prodsum]] %>% replace(.==0, NA)
### Groupby
HungarySchoolsLanguage<- HungarySchools %>%
group_by(gid_2) %>%
summarise(
name_2= first(name_2),
!!var_prodsum := sum(!!var_prodsum , na.rm = TRUE),
!!var_stud_count := sum(!!var_stud_count, na.rm = TRUE),
) %>%
mutate(., !!var_score  := (!!var_prodsum)  / (!!var_stud_count))
### Merging them into a large Dataset with all languages - covert them to data.frame - later we convert them back
HungaryLanugageAll<- merge(HungaryLanugageAll %>% as.data.frame(),HungarySchoolsLanguage %>% as.data.frame(), by.x="GID_2", by.y="gid_2", no_dups=TRUE )
print(l)
}
## Prodsum cols
prodsum_cols <-  HungaryLanugageAll %>%
select(., contains('_prodsum')) %>%
colnames(.)
## Number of Student  columns
stud_cols <-  HungaryLanugageAll %>%
select(., contains('_stud_count')) %>%
colnames(.)
### Creating over all columns prodsum, all student, score
HungaryLanugageAll$all_prodsum <- rowSums(HungaryLanugageAll[prodsum_cols], na.rm = TRUE)
HungaryLanugageAll$all_stud <- rowSums(HungaryLanugageAll[stud_cols], na.rm = TRUE)
HungaryLanugageAll <- HungaryLanugageAll %>%
mutate(., all_score = all_prodsum / all_stud )
### Convert back to SF
HungaryLanugageAll <- st_as_sf(HungaryLanugageAll)
tm_shape(HungaryLanugageAll) +
tm_polygons("all_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("NAME_2", "all_score"),
title="Language Score")
sum(HungaryLanugageAll$all_prodsum)
sum(HungaryLanugageAll$all_stud)
### Convert back to SF
HungaryLanugageAll <- st_as_sf(HungaryLanugageAll)
tm_shape(HungaryLanugageAll) +
tm_polygons("all_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("NAME_2", "all_score"),
title="Language Score")
HungaryLanugageAll <- HungaryLanugageAll %>%
mutate(., all_score = all_prodsum / all_stud )
### Convert back to SF
HungaryLanugageAll <- st_as_sf(HungaryLanugageAll)
tm_shape(HungaryLanugageAll) +
tm_polygons("all_score",
style="jenks",
palette="PuOr",
midpoint=NA,
popup.vars=c("NAME_2", "all_score"),
title="Language Score")
