#first library a few packages that we will use during the practical
#note you may need to install them first...
library(spatstat)
library(here)
library(sp)
library(rgeos)
library(maptools)
library(GISTools)
library(tmap)
library(sf)
library(geojson)
library(geojsonio)
library(tmaptools)
library(stringr)
library(dplyr)
library(readr)
library(glue)

## Interactive Viewing
tmap_mode("view")

SchoolData <- read_csv(here::here('SchoolData', 'school_data_Google_location_highschool_cleaned.csv'), 
         na = c("NA", "n/a", ""))
### Filter for highschools
SchoolData <- SchoolData %>% dplyr::filter(!is.na(hu_midlevel))
## remove duplicates 
 
SchoolData <- SchoolData[!duplicated(SchoolData[ , c('school_coords','hist_midlevel', 'eng_lang_midlevel', 'hu_midlevel', 'math_midlevel')]),]


projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
SchoolData <- st_as_sf(x= SchoolData,
                         coords=c('longitude','latitude'),
                         crs=projcrs)
st_crs(SchoolData) <- projcrs 

SchoolData <- SchoolData %>%
  st_transform(.,23700)




### Hungary Shape
HungaryShapeMap <- st_read(here::here("shapefiles", "gadm36_HUN_shp", "gadm36_HUN_2.shp"))
## Hungary's epsg: 23700
HungaryShapeMap <- HungaryShapeMap %>%
  st_transform(., 23700)

#qtm(HungaryShapeMap)

HungarySchools <- HungaryShapeMap%>%
  st_join(SchoolData)%>%
  add_count(GID_2)%>%
  janitor::clean_names()%>%
  mutate(area=st_area(.))%>%
  mutate(density=n/area)


################# Create the English Language Score

HungarySchoolsEng <- HungarySchools %>% 
  mutate(., eng_lang_a_prodsum = ifelse(eng_lang_a_percent >= 45, (eng_lang_a_percent + 50) * eng_lang_a , eng_lang_a_percent  * eng_lang_a)) %>%
  mutate(., eng_lang_midlevel_prodsum = eng_lang_midlevel * eng_lang_midlevel_percent) %>%
  mutate(., eng_prodsum =  ifelse(is.na(eng_lang_a_prodsum), 0, eng_lang_a_prodsum) +  ifelse(is.na(eng_lang_midlevel_prodsum), 0, eng_lang_midlevel_prodsum)) %>%
  mutate(., eng_stud_count =  ifelse(is.na(eng_lang_a), 0, eng_lang_a) +  ifelse(is.na(eng_lang_midlevel), 0, eng_lang_midlevel))


HungarySchoolsEng$eng_stud_count <- HungarySchoolsEng$eng_stud_count %>% replace(.==0, NA)
HungarySchoolsEng$eng_prodsum <- HungarySchoolsEng$eng_prodsum %>% replace(.==0, NA)


HungarySchoolsLanguage<- HungarySchoolsEng %>%                    
  group_by(gid_2) %>% 
  summarise(
            density = first(density),
            name_2= first(name_2),
            eng_prodsum = sum(eng_prodsum , na.rm = TRUE),
            eng_stud_count= sum(eng_stud_count, na.rm = TRUE),
  ) %>%
  mutate(., eng_score = eng_prodsum / eng_stud_count)

## Visualise - English Language Map
tm_shape(HungarySchoolsLanguage) +
  tm_polygons("eng_score",
              style="jenks",
              palette="PuOr",
              midpoint=NA,
              popup.vars=c("name_2", "eng_score"),
              title="English Language Score")

###########################################################################################################
#              Create the language score for all languages and create an overall language score
###########################################################################################################

lang_cols = c('eng','hebrew','spanish','lovari','holland','slovakian','esperanto','croatian','greek','chinese','german','romanian','french','polish','portuguese','italian','japanese','serbian','russian','beas')

HungaryLanugageAll <- HungaryShapeMap
for (l in lang_cols) {
  
  var_lang_a_prodsum =rlang::sym(paste(l,"_lang_a_prodsum",sep = ""))
  var_lang_midlevel_prodsum =rlang::sym(paste(l,"_lang_midlevel_prodsum",sep = ""))
  
  var_prodsum =rlang::sym(paste(l,"_prodsum",sep = ""))
  var_stud_count =rlang::sym(paste(l,"_stud_count",sep = ""))
  
  var_lang_a <- rlang::sym(paste(l,"_lang_a",sep = ""))
  var_lang_a_percent <- rlang::sym(paste(l,"_lang_a_percent",sep = ""))
  var_lang_midlevel <- rlang::sym(paste(l,"_lang_midlevel",sep = ""))
  var_lang_midlevel_percent <- rlang::sym(paste(l,"_lang_midlevel_percent",sep = ""))
  var_score <- rlang::sym(paste(l,"_score",sep = ""))
  
  ### Creating extra columns 
  HungarySchools <- HungarySchools %>% 
    mutate(., (!!var_lang_a_prodsum) := ifelse((!!var_lang_a_percent) >= 45, ((!!var_lang_a_percent) + 50) * (!!var_lang_a) , (!!var_lang_a_percent)  * (!!var_lang_a))) %>%
    mutate(., (!!var_lang_midlevel_prodsum) := (!!var_lang_midlevel) * (!!var_lang_midlevel_percent)) %>%
    
    mutate(., (!!var_prodsum ):=  ifelse(is.na((!!var_lang_a_prodsum)), 0, (!!var_lang_a_prodsum)) +  ifelse(is.na((!!var_lang_midlevel_prodsum)), 0, (!!var_lang_midlevel_prodsum))) %>%
    mutate(., (!!var_stud_count) :=  ifelse(is.na((!!var_lang_a)), 0, (!!var_lang_a)) +  ifelse(is.na((!!var_lang_midlevel)), 0, (!!var_lang_midlevel)))
  
  ## Zeros are NA - 
  HungarySchools[[var_stud_count]] <- HungarySchools[[var_stud_count]] %>% replace(.==0, NA)
  HungarySchools[[var_prodsum]] <- HungarySchools[[var_prodsum]] %>% replace(.==0, NA)
  
  
  ### Groupby
  HungarySchoolsLanguage<- HungarySchools %>%                    
    group_by(gid_2) %>% 
    summarise(
      name_2= first(name_2),
      !!var_prodsum := sum(!!var_prodsum , na.rm = TRUE),
      !!var_stud_count := sum(!!var_stud_count, na.rm = TRUE),
    ) %>%
    mutate(., !!var_score  := (!!var_prodsum)  / (!!var_stud_count))
  
  ### Merging them into a large Dataset with all languages - covert them to data.frame - later we convert them back
  HungaryLanugageAll<- merge(HungaryLanugageAll %>% as.data.frame(),HungarySchoolsLanguage %>% as.data.frame(), by.x="GID_2", by.y="gid_2", no_dups=TRUE )
  
  print(l)
  
}


## Prodsum cols
prodsum_cols <-  HungaryLanugageAll %>%
  select(., contains('_prodsum')) %>%
  colnames(.)
## Number of Student  columns
stud_cols <-  HungaryLanugageAll %>%
  select(., contains('_stud_count')) %>%
  colnames(.)

### Creating over all columns prodsum, all student, score 
HungaryLanugageAll$all_prodsum <- rowSums(HungaryLanugageAll[prodsum_cols], na.rm = TRUE)
HungaryLanugageAll$all_stud <- rowSums(HungaryLanugageAll[stud_cols], na.rm = TRUE)


### Convert back to SF
HungaryLanugageAll <- st_as_sf(HungaryLanugageAll)


## Final Language Score column
HungaryLanugageAll <- HungaryLanugageAll %>% 
  mutate(., all_score = all_prodsum / all_stud )

### MAP OF THE LANGUAGE TOTAL SCORE
tm_shape(HungaryLanugageAll) +
  tm_polygons("all_score",
              style="jenks",
              palette="PuOr",
              midpoint=NA,
              popup.vars=c("NAME_2", "all_score"),
              title="Language Score")



sum(HungaryLanugageAll$all_prodsum)
sum(HungaryLanugageAll$all_stud)



################### Moran's I - Gobal or Local?? 
library(spdep)

HungaryLanugageAll <- HungaryLanugageAll %>% dplyr::filter(!is.na(all_score))



coordsW <- HungaryLanugageAll%>%
  st_centroid()%>%
  st_geometry()

plot(coordsW,axes=TRUE)

#create a neighbours list
HungaryLanugageAll_nb <- HungaryLanugageAll %>%
  spdep::poly2nb(., queen=T)


### Plot
plot(HungaryLanugageAll_nb, st_geometry(coordsW), col="red")
#add a map underneath
plot(HungaryLanugageAll$geometry, add=T)

#create a spatial weights object from these weights
HungaryLanugageAll.lw <- HungaryLanugageAll_nb %>%
  spdep::nb2listw(., style="C")

### Moran's I

##all score the variable
I_HungaryLanugageAll_Global_Density <- HungaryLanugageAll %>%
  pull(all_score) %>%
  as.vector()%>%
  spdep::moran.test(., HungaryLanugageAll.lw)

HungaryLanugageAll.lw

I_HungaryLanugageAll_Global_Density
